{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"comment":"\nDado is a [dependency injection][di] framework for [Dart][dart].\n\nDado attempts to have minimal set of features and a syntax that takes\nadvantage of Dart, which makes it different from many other popular DI\nframeworks.\n\nDado tries to make DI more lightweight by letting you define modules as Dart\nclasses and as declaratively as possible. Bindings can be define by simply\ndeclaring an abstract method:\n\n    class MyModule extends Module {\n      Foo get foo;\n    }\n\n[dart]: http://dartlang.org\n[di]: http://en.wikipedia.org/wiki/Dependency_injection\n\nExample\n-------\n\n    import 'package:dado/dado.dart';\n\n    class MyModule extends Module {\n\n      // binding to an instance, similar to toInstance() in Guice\n      String serverAddress = \"127.0.0.1\";\n\n      // Getters define singletons, similar to in(Singleton.class) in Guice\n      Foo get foo;\n\n      // Methods define a factory binding, similar to bind().to() in Guice\n      Bar newBar();\n\n      // Methods that delegate to bindTo() bind a type to a specific\n      // implementation of that type\n      Baz get baz => bindTo(Baz).singleton;\n\n      // Bindings can be made to provider methods\n      Qux newQux() => bindTo(Qux)\n        .providedBy((Foo foo) => new Qux(foo, 'not injected')).newInstance();\n      }\n\n      class Bar {\n        // A default method is automatically injected with dependencies\n        Bar(Foo foo);\n      }\n\n      main() {\n        var injector = new Injector([MyModule]);\n        Bar bar = injector.getInstance(Bar);\n      }\n","uri":"file:///Users/justinfagnani/Documents/Projects/dado-git/lib/dado.dart","id":"dado","children":[{"returnType":{"refId":"dart.core/Symbol","name":"Symbol"},"name":"_typeName","isPrivate":true,"id":"_typeName1()","children":[{"ref":{"refId":"dart.core/Type","name":"Type"},"name":"type","id":"type","kind":"param"}],"line":"66","kind":"method"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA Module is a declaration of bindings that instruct an [Injector] how to\ncreate objects.\n\nBindings are declared with members on a Module. The return type of the member\ndefines what type the binding is for. The kind of member (variable, getter,\nmethod) defines the type of binding:\n\n* Variables define instance bindings. The type of the variable is bound to\n  its value.\n* Abstract getters define singleton bindings.\n* Abstract methods define unscoped bindings. A new instance is created every\n  time [Injector.getInstance] is called.\n* A non-abstract method must return instances of its return type. Often\n  this will be done by calling [bindTo] with a type that is bound to, and\n  then either [Binder.singleton] or [Binder.newInstance] dependeing on\n  whether the method is a getter or not. Getters define singletons and should\n  call [Binder.singleton], methods should call [Binder.newInstance].\n","name":"Module","id":"Module","children":[{"returnType":{"refId":"dado/Binder","name":"Binder"},"name":"bindTo","id":"bindTo1()","children":[{"ref":{"refId":"dart.core/Type","name":"Type"},"name":"type","id":"type","kind":"param"}],"line":"336","kind":"method"},{"ref":{"refId":"dado/Injector","name":"Injector"},"name":"_currentInjector","isPrivate":true,"id":"_currentInjector","line":"333","kind":"variable"},{"ref":{"refId":"dart.core/Symbol","name":"Symbol"},"name":"_currentTypeName","isPrivate":true,"id":"_currentTypeName","line":"334","kind":"variable"}],"line":"332","kind":"class"},{"superclass":{"refId":"dado/_Binder","name":"_Binder"},"name":"ProvidedBinder","id":"ProvidedBinder","children":[{"name":"newInstance","id":"newInstance0()","line":"309","kind":"method"},{"name":"singleton","id":"singleton","line":"301","kind":"property"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"provider","id":"provider","line":"296","kind":"variable"},{"name":"ProvidedBinder","id":"ProvidedBinder4()","children":[{"name":"injector","id":"injector","kind":"param"},{"name":"boundType","id":"boundType","kind":"param"},{"name":"type","id":"type","kind":"param"},{"initializedField":{"refId":"dado/ProvidedBinder/provider","name":"provider"},"ref":{"refId":"dart.core/Function","name":"Function"},"name":"provider","id":"provider","kind":"param"}],"line":"298","kind":"constructor"}],"line":"295","kind":"class"},{"superclass":{"refId":"dado/_Binder","name":"_Binder"},"comment":"\nReturned by [Module.bindTo], defines a binding from one type (the return\ntype of the binding declaration) to another type (the argument to [bindTo]).\n","name":"Binder","id":"Binder","children":[{"returnType":{"refId":"dado/ProvidedBinder","name":"ProvidedBinder"},"name":"providedBy","id":"providedBy1()","children":[{"name":"provider","id":"provider","kind":"param"}],"line":"291","kind":"method"},{"name":"Binder","id":"Binder3()","children":[{"name":"injector","id":"injector","kind":"param"},{"name":"boundType","id":"boundType","kind":"param"},{"name":"type","id":"type","kind":"param"}],"line":"289","kind":"constructor"}],"line":"288","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"name":"_Binder","isPrivate":true,"id":"_Binder","children":[{"name":"newInstance","id":"newInstance0()","line":"276","kind":"method"},{"name":"singleton","id":"singleton","line":"271","kind":"property"},{"ref":{"refId":"dado/Injector","name":"Injector"},"isFinal":true,"name":"_injector","isPrivate":true,"id":"_injector","line":"265","kind":"variable"},{"ref":{"refId":"dart.core/Symbol","name":"Symbol"},"isFinal":true,"name":"_boundType","isPrivate":true,"id":"_boundType","line":"266","kind":"variable"},{"ref":{"refId":"dart.core/Type","name":"Type"},"isFinal":true,"name":"type","id":"type","line":"267","kind":"variable"},{"name":"_Binder","id":"_Binder3()","children":[{"initializedField":{"refId":"dado/_Binder/_injector","name":"_injector"},"ref":{"refId":"dado/Injector","name":"Injector"},"name":"_injector","isPrivate":true,"id":"_injector","kind":"param"},{"initializedField":{"refId":"dado/_Binder/_boundType","name":"_boundType"},"ref":{"refId":"dart.core/Symbol","name":"Symbol"},"name":"_boundType","isPrivate":true,"id":"_boundType","kind":"param"},{"initializedField":{"refId":"dado/_Binder/type","name":"type"},"ref":{"refId":"dart.core/Type","name":"Type"},"name":"type","id":"type","kind":"param"}],"line":"269","kind":"constructor"}],"line":"264","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn Injector constructs objects based on it's configuration. The Injector\ntracks dependencies between objects and uses the bindings defined in its\nmodules and parent injector to resolve the dependencies and inject them into\nnewly created objects.\n\nInjectors are rarely used directly, usually only at the initialization of an\napplication to create the root objects for the application. The Injector does\nmost of it's work behind the scenes, creating objects as neccessary to\nfullfill dependencies.\n\nInjectors are hierarchical. [createChild] is used to create injectors that\ninherit their configuration from their parent while adding or overriding\nsome bindings.\n\nAn Injector contains a default binding for itself, so that it can be used\nto request instances generically, or to create child injectors. Applications\nshould generally have very little injector aware code.\n\n","name":"Injector","id":"Injector","children":[{"returnType":{"refId":"dado/Injector","name":"Injector"},"comment":"\nCreates a child of this Injector with the additional modules installed.\n[modules] must be a list of Types that extend Module.\n[newInstances] is a list of Types that the child should create new\ninstances for, rather than use an instance from the parent.\n","name":"createChild","id":"createChild2()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Type","name":"Type"}],"name":"List"},"name":"modules","id":"modules","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Type","name":"Type"}],"name":"List"},"isOptional":true,"name":"newInstances","id":"newInstances","kind":"param"}],"line":"127","kind":"method"},{"returnType":{"refId":"dart.core/Object","name":"Object"},"comment":"\nReturns an instance of [type].\n","name":"getInstanceOf","id":"getInstanceOf1()","children":[{"ref":{"refId":"dart.core/Type","name":"Type"},"name":"type","id":"type","kind":"param"}],"line":"133","kind":"method"},{"comment":"\nExecute the function [f], injecting any arguments.\n","name":"callInjected","id":"callInjected1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","kind":"param"}],"line":"139","kind":"method"},{"returnType":{"refId":"dado/_Provider","name":"_Provider"},"name":"_getProvider","isPrivate":true,"id":"_getProvider1()","children":[{"ref":{"refId":"dart.core/Symbol","name":"Symbol"},"name":"name","id":"name","kind":"param"}],"line":"147","kind":"method"},{"returnType":{"refId":"dart.core/Object","name":"Object"},"name":"_getInstanceOf","isPrivate":true,"id":"_getInstanceOf3()","children":[{"ref":{"refId":"dart.core/Symbol","name":"Symbol"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"dart.mirrors/ClassMirror","name":"ClassMirror"},"name":"mirror","id":"mirror","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"allowImplicit","id":"allowImplicit","line":"155","kind":"param"}],"line":"154","kind":"method"},{"returnType":{"refId":"dart.core/Object","name":"Object"},"name":"_getSingletonOf","isPrivate":true,"id":"_getSingletonOf2()","children":[{"ref":{"refId":"dart.core/Symbol","name":"Symbol"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"dart.mirrors/ClassMirror","name":"ClassMirror"},"name":"mirror","id":"mirror","kind":"param"}],"line":"169","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_registerBindings","isPrivate":true,"id":"_registerBindings1()","children":[{"ref":{"refId":"dart.core/Type","name":"Type"},"name":"moduleType","id":"moduleType","kind":"param"}],"line":"181","kind":"method"},{"returnType":{"refId":"dart.core/Object","name":"Object"},"comment":"\nCreate a new instance with a type represented by [m], resolving\nconstructor dependencies.\n","name":"_newFromTypeMirror","isPrivate":true,"id":"_newFromTypeMirror1()","children":[{"ref":{"refId":"dart.mirrors/ClassMirror","name":"ClassMirror"},"name":"m","id":"m","kind":"param"}],"line":"246","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"261","kind":"method"},{"ref":{"refId":"dart.core/Symbol","name":"Symbol"},"isFinal":true,"isStatic":true,"name":"_injectorClassName","isPrivate":true,"id":"_injectorClassName","line":"89","kind":"variable"},{"ref":{"refId":"dado/Injector","name":"Injector"},"isFinal":true,"comment":"The parent of this injector, if it's a child, or null.","name":"parent","id":"parent","line":"92","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The name of this injector, if one was provided.","name":"name","id":"name","line":"95","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Symbol","name":"Symbol"}],"name":"List"},"isFinal":true,"name":"_newInstances","isPrivate":true,"id":"_newInstances","line":"97","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Symbol","name":"Symbol"},{"refId":"dado/_Provider","name":"_Provider"}],"name":"Map"},"isFinal":true,"name":"_providers","isPrivate":true,"id":"_providers","line":"98","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Symbol","name":"Symbol"},{"refId":"dart.core/Object","name":"Object"}],"name":"Map"},"isFinal":true,"name":"_singletons","isPrivate":true,"id":"_singletons","line":"99","kind":"variable"},{"comment":"\nConstructs a new Injector using [modules] to provide bindings. If [parent]\nis specificed, the injector is a child injector that inherits bindings\nfrom its parent. The modules of a child injector add to or override its\nparent's bindings. [newInstances] is a list of types that a child injector\nshould create distinct instances for, separate from it's parent.\nnewInstances only apply to singleton bindings.\n","name":"Injector","id":"Injector4()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Type","name":"Type"}],"name":"List"},"name":"modules","id":"modules","kind":"param"},{"initializedField":{"refId":"dado/Injector/parent","name":"parent"},"isNamed":true,"ref":{"refId":"dado/Injector","name":"Injector"},"isOptional":true,"name":"parent","id":"parent","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Type","name":"Type"}],"name":"List"},"isOptional":true,"name":"newInstances","id":"newInstances","kind":"param"},{"initializedField":{"refId":"dado/Injector/name","name":"name"},"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"name","id":"name","line":"110","kind":"param"}],"line":"109","kind":"constructor"}],"line":"88","kind":"class"},{"returnType":{"refId":"dart.core/Object","name":"Object"},"name":"_Provider","isPrivate":true,"id":"_Provider","children":[{"ref":{"refId":"dado/Injector","name":"Injector"},"name":"injector","id":"injector","kind":"param"}],"line":"64","kind":"typedef"}],"line":"58","kind":"library"}